{"ast":null,"code":"import _slicedToArray from\"/Users/johnkim/Developer/crk-django/crk-venv/crk/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import strawberry from'../../svg/strawberry.svg';import gingerbrave from'../../svg/gingerbrave.svg';import muscle from'../../svg/muscle.svg';import CookieImage from'./CookieImage';import Dropdown from'./Dropdown';import axios from'axios';import{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function CookieSelect(cookies){cookies=cookies.cookies;// console.log('in CookieSelect')\n// const [cookies , setCookies] = useState(null)\nconsole.log(cookies);// useEffect(() => {\n//     console.log(\"use effect!\")\n//     getCookies()\n//         } ,[])\n// console.log(cookies)\n// // get cookies info from database\n// function getCookies() {\n// axios({\n//     method: \"GET\",\n//     url:\"cookies_db/\",\n//     // '/api/cookies/?format=json'\n//     // \n//     }).then((response)=>{ // success\n//         const data = response.data\n//         setCookies(data)\n//         console.log(response.data)\n//     }).catch((error) => { // failure\n//     if (error.response) {\n//         console.log(error.response);\n//         console.log(error.response.status);\n//         console.log(error.response.headers);\n//         }\n//     })}\n// use state for if cookie is selected or not\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),selection=_useState2[0],setSelection=_useState2[1];// use state for entire cookie list object\n// label: Name\n// value: value given \n// src: photo\n// selected: selection boolean\n// const [ cookies, setCookies ] = useState([{\n//     label: 'Strawberry Cookie',\n//     value: 'strawberry',\n//     src: strawberry,\n//     selected: false,\n// }, {\n//     label: 'Gingerbrave',\n//     value: 'gingerbrave',\n//     src: gingerbrave,\n//     selected: false,\n// }, {\n//     label: 'Muscle Cookie',\n//     value: 'muscle',\n//     src: muscle,\n//     selected: false,\n// },{\n//     label: 'Wizard Cookie',\n//     value: 'wizard',\n//     src: gingerbrave,\n//     selected: false,\n// },{\n//     label: 'Beet Cookie',\n//     value: 'beet',\n//     src: gingerbrave,\n//     selected: false,\n// },{\n//     label: 'Angel Cookie',\n//     value: 'angel',\n//     src: gingerbrave,\n//     selected: false,\n// }]);\n// function to select cookie\nvar handleSelect=function handleSelect(cookie){setSelection(cookie);};if(cookies){return/*#__PURE__*/ (// <div className=\"block rounded-xl border border-gray-100 p-4 shadow-sm hover:border-gray-200 hover:ring-1 hover:ring-gray-200 focus:outline-none focus:ring\">        \n//     <CookieImage value={selection}/>\n//     <Dropdown cookies={cookies} value={selection} onChange={handleSelect} />\n//     {/* <h2 className=\"mt-2 font-bold\">Add Cookie</h2> */}\n// </div>\n_jsxs(\"div\",{className:\"block rounded-xl border border-secondary p-4 shadow-sm hover:border-gray-700 hover:ring-1 hover:ring-gray-200 focus:outline-none focus:ring \",children:[/*#__PURE__*/_jsx(CookieImage,{value:selection}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center\",children:/*#__PURE__*/_jsx(Dropdown,{cookies:cookies,value:selection,onChange:handleSelect})})]}));}return/*#__PURE__*/_jsxs(\"div\",{className:\"block rounded-xl border border-secondary p-4 shadow-sm hover:border-gray-700 hover:ring-1 hover:ring-gray-200 focus:outline-none focus:ring \",children:[/*#__PURE__*/_jsx(CookieImage,{value:selection}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center\"})]});}// handleCommentEdit: function(id, text) {\n//     this.setState({\n//       data: this.state.data.map(el => (el.id === id ? Object.assign({}, el, { text }) : el))\n//     });\n// }\n// setCookies\n// cookies = [{\n//     label: 'Strawberry Cookie',\n//     value: 'strawberry',\n//     src: strawberry,\n//     selected: false,\n// }, {\n//     label: 'Gingerbrave',\n//     value: 'gingerbrave',\n//     src: gingerbrave,\n//     selected: false,\n// }, {\n//     label: 'Muscle Cookie',\n//     value: 'muscle',\n//     src: gingerbrave,\n//     selected: false,\n// },{\n//     label: 'Wizard Cookie',\n//     value: 'wizard',\n//     src: gingerbrave,\n//     selected: false,\n// },{\n//     label: 'Beet Cookie',\n//     value: 'beet',\n//     src: gingerbrave,\n//     selected: false,\n// },{\n//     label: 'Angel Cookie',\n//     value: 'angel',\n//     src: gingerbrave,\n//     selected: false,\n// }];\n// const listCookies = cookies.map(cookie =>\n// );","map":{"version":3,"names":["strawberry","gingerbrave","muscle","CookieImage","Dropdown","axios","useState","useEffect","jsx","_jsx","jsxs","_jsxs","CookieSelect","cookies","console","log","_useState","_useState2","_slicedToArray","selection","setSelection","handleSelect","cookie","className","children","value","onChange"],"sources":["/Users/johnkim/Developer/crk-django/crk-venv/crk/frontend/src/components/battle/CookieSelect.js"],"sourcesContent":["import strawberry from '../../svg/strawberry.svg'\nimport gingerbrave from '../../svg/gingerbrave.svg'\nimport muscle from '../../svg/muscle.svg'\nimport CookieImage from './CookieImage'\nimport Dropdown from './Dropdown'\nimport axios from 'axios';\n\nimport { useState, useEffect } from 'react';\n\nexport default function CookieSelect(cookies) {\n    cookies = cookies.cookies\n    // console.log('in CookieSelect')\n    // const [cookies , setCookies] = useState(null)\n    console.log(cookies)\n\n    // useEffect(() => {\n    //     console.log(\"use effect!\")\n    //     getCookies()\n    //         } ,[])\n\n    // console.log(cookies)\n    \n    // // get cookies info from database\n    // function getCookies() {\n    // axios({\n    //     method: \"GET\",\n    //     url:\"cookies_db/\",\n    //     // '/api/cookies/?format=json'\n    //     // \n    //     }).then((response)=>{ // success\n    //         const data = response.data\n    //         setCookies(data)\n    //         console.log(response.data)\n\n    //     }).catch((error) => { // failure\n    //     if (error.response) {\n    //         console.log(error.response);\n    //         console.log(error.response.status);\n    //         console.log(error.response.headers);\n    //         }\n    //     })}\n\n\n\n\n    // use state for if cookie is selected or not\n    const [ selection, setSelection ] = useState(null);\n    // use state for entire cookie list object\n    // label: Name\n    // value: value given \n    // src: photo\n    // selected: selection boolean\n    // const [ cookies, setCookies ] = useState([{\n    //     label: 'Strawberry Cookie',\n    //     value: 'strawberry',\n    //     src: strawberry,\n    //     selected: false,\n    // }, {\n    //     label: 'Gingerbrave',\n    //     value: 'gingerbrave',\n    //     src: gingerbrave,\n    //     selected: false,\n    // }, {\n    //     label: 'Muscle Cookie',\n    //     value: 'muscle',\n    //     src: muscle,\n    //     selected: false,\n    // },{\n    //     label: 'Wizard Cookie',\n    //     value: 'wizard',\n    //     src: gingerbrave,\n    //     selected: false,\n    // },{\n    //     label: 'Beet Cookie',\n    //     value: 'beet',\n    //     src: gingerbrave,\n    //     selected: false,\n    // },{\n    //     label: 'Angel Cookie',\n    //     value: 'angel',\n    //     src: gingerbrave,\n    //     selected: false,\n    // }]);\n\n\n    // function to select cookie\n    const handleSelect = (cookie) => {\n        setSelection(cookie);\n    };\n\n\n    if (cookies) {\n        return (\n            // <div className=\"block rounded-xl border border-gray-100 p-4 shadow-sm hover:border-gray-200 hover:ring-1 hover:ring-gray-200 focus:outline-none focus:ring\">        \n            //     <CookieImage value={selection}/>\n    \n            //     <Dropdown cookies={cookies} value={selection} onChange={handleSelect} />\n            //     {/* <h2 className=\"mt-2 font-bold\">Add Cookie</h2> */}\n            // </div>\n            \n            <div className=\"block rounded-xl border border-secondary p-4 shadow-sm hover:border-gray-700 hover:ring-1 hover:ring-gray-200 focus:outline-none focus:ring \">        \n                <CookieImage value={selection}/>\n     \n    \n                <div className='flex justify-center'>\n                <Dropdown cookies={cookies} value={selection} onChange={handleSelect} />\n                </div>\n                {/* <h2 className=\"mt-2 font-bold\">Add Cookie</h2> */}\n            </div>\n        );\n    }\n    return (\n        <div className=\"block rounded-xl border border-secondary p-4 shadow-sm hover:border-gray-700 hover:ring-1 hover:ring-gray-200 focus:outline-none focus:ring \">        \n                <CookieImage value={selection}/>\n     \n    \n                <div className='flex justify-center'>\n                {/* <Dropdown cookies={cookies} value={selection} onChange={handleSelect} /> */}\n                </div>\n                {/* <h2 className=\"mt-2 font-bold\">Add Cookie</h2> */}\n            </div>\n    );\n    \n}\n\n\n    // handleCommentEdit: function(id, text) {\n    //     this.setState({\n    //       data: this.state.data.map(el => (el.id === id ? Object.assign({}, el, { text }) : el))\n    //     });\n    // }\n\n    // setCookies\n\n    // cookies = [{\n    //     label: 'Strawberry Cookie',\n    //     value: 'strawberry',\n    //     src: strawberry,\n    //     selected: false,\n    // }, {\n    //     label: 'Gingerbrave',\n    //     value: 'gingerbrave',\n    //     src: gingerbrave,\n    //     selected: false,\n    // }, {\n    //     label: 'Muscle Cookie',\n    //     value: 'muscle',\n    //     src: gingerbrave,\n    //     selected: false,\n    // },{\n    //     label: 'Wizard Cookie',\n    //     value: 'wizard',\n    //     src: gingerbrave,\n    //     selected: false,\n    // },{\n    //     label: 'Beet Cookie',\n    //     value: 'beet',\n    //     src: gingerbrave,\n    //     selected: false,\n    // },{\n    //     label: 'Angel Cookie',\n    //     value: 'angel',\n    //     src: gingerbrave,\n    //     selected: false,\n    // }];\n\n    // const listCookies = cookies.map(cookie =>\n        \n    // );"],"mappings":"+IAAA,MAAO,CAAAA,UAAU,KAAM,0BAA0B,CACjD,MAAO,CAAAC,WAAW,KAAM,2BAA2B,CACnD,MAAO,CAAAC,MAAM,KAAM,sBAAsB,CACzC,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,MAAO,CAAAC,QAAQ,KAAM,YAAY,CACjC,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB,OAASC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE5C,cAAe,SAAS,CAAAC,YAAYA,CAACC,OAAO,CAAE,CAC1CA,OAAO,CAAGA,OAAO,CAACA,OAAO,CACzB;AACA;AACAC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC,CAEpB;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA,IAAAG,SAAA,CAAoCV,QAAQ,CAAC,IAAI,CAAC,CAAAW,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAA1CG,SAAS,CAAAF,UAAA,IAAEG,YAAY,CAAAH,UAAA,IAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA,GAAM,CAAAI,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAIC,MAAM,CAAK,CAC7BF,YAAY,CAACE,MAAM,CAAC,CACxB,CAAC,CAGD,GAAIT,OAAO,CAAE,CACT,oBACI;AACA;AAEA;AACA;AACA;AAEAF,KAAA,QAAKY,SAAS,CAAC,8IAA8I,CAAAC,QAAA,eACzJf,IAAA,CAACN,WAAW,EAACsB,KAAK,CAAEN,SAAU,CAAC,CAAC,cAGhCV,IAAA,QAAKc,SAAS,CAAC,qBAAqB,CAAAC,QAAA,cACpCf,IAAA,CAACL,QAAQ,EAACS,OAAO,CAAEA,OAAQ,CAACY,KAAK,CAAEN,SAAU,CAACO,QAAQ,CAAEL,YAAa,CAAE,CAAC,CACnE,CAAC,EAEL,CAAC,EAEd,CACA,mBACIV,KAAA,QAAKY,SAAS,CAAC,8IAA8I,CAAAC,QAAA,eACrJf,IAAA,CAACN,WAAW,EAACsB,KAAK,CAAEN,SAAU,CAAC,CAAC,cAGhCV,IAAA,QAAKc,SAAS,CAAC,qBAAqB,CAE/B,CAAC,EAEL,CAAC,CAGlB,CAGI;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}