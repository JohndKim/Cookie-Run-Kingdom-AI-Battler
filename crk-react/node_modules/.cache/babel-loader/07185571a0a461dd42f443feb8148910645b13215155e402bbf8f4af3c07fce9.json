{"ast":null,"code":"import _slicedToArray from\"/Users/suesix/projects/react_projects/Cookie-Run-Kingdom-AI-Battler/crk-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import strawberry from'../svg/strawberry.svg';import gingerbrave from'../svg/gingerbrave.svg';import CookieImage from'./CookieImage';import Dropdown from'./Dropdown';import{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function CookieList(){// use state for if cookie is selected or not\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),selection=_useState2[0],setSelection=_useState2[1];// use state for entire cookie list object\n// label: Name\n// value: value given \n// src: photo\n// selected: selection boolean\nvar _useState3=useState([{label:'Strawberry Cookie',value:'strawberry',src:strawberry,selected:false},{label:'Gingerbrave',value:'gingerbrave',src:gingerbrave,selected:false},{label:'Muscle Cookie',value:'muscle',src:gingerbrave,selected:false},{label:'Wizard Cookie',value:'wizard',src:gingerbrave,selected:false},{label:'Beet Cookie',value:'beet',src:gingerbrave,selected:false},{label:'Angel Cookie',value:'angel',src:gingerbrave,selected:false}]),_useState4=_slicedToArray(_useState3,2),cookies=_useState4[0],setCookies=_useState4[1];// function to select cookie\nvar handleSelect=function handleSelect(cookie){setSelection(cookie);};return/*#__PURE__*/_jsxs(\"div\",{className:\"block rounded-xl border border-gray-100 p-4 shadow-sm hover:border-gray-200 hover:ring-1 hover:ring-gray-200 focus:outline-none focus:ring\",children:[/*#__PURE__*/_jsx(CookieImage,{cookies:cookies,value:selection}),/*#__PURE__*/_jsx(Dropdown,{cookies:cookies,value:selection,onChange:handleSelect})]});}// handleCommentEdit: function(id, text) {\n//     this.setState({\n//       data: this.state.data.map(el => (el.id === id ? Object.assign({}, el, { text }) : el))\n//     });\n// }\n// setCookies\n// cookies = [{\n//     label: 'Strawberry Cookie',\n//     value: 'strawberry',\n//     src: strawberry,\n//     selected: false,\n// }, {\n//     label: 'Gingerbrave',\n//     value: 'gingerbrave',\n//     src: gingerbrave,\n//     selected: false,\n// }, {\n//     label: 'Muscle Cookie',\n//     value: 'muscle',\n//     src: gingerbrave,\n//     selected: false,\n// },{\n//     label: 'Wizard Cookie',\n//     value: 'wizard',\n//     src: gingerbrave,\n//     selected: false,\n// },{\n//     label: 'Beet Cookie',\n//     value: 'beet',\n//     src: gingerbrave,\n//     selected: false,\n// },{\n//     label: 'Angel Cookie',\n//     value: 'angel',\n//     src: gingerbrave,\n//     selected: false,\n// }];\n// const listCookies = cookies.map(cookie =>\n// );","map":{"version":3,"names":["strawberry","gingerbrave","CookieImage","Dropdown","useState","jsx","_jsx","jsxs","_jsxs","CookieList","_useState","_useState2","_slicedToArray","selection","setSelection","_useState3","label","value","src","selected","_useState4","cookies","setCookies","handleSelect","cookie","className","children","onChange"],"sources":["/Users/suesix/projects/react_projects/Cookie-Run-Kingdom-AI-Battler/crk-react/src/components/CookieList.js"],"sourcesContent":["import strawberry from '../svg/strawberry.svg'\nimport gingerbrave from '../svg/gingerbrave.svg'\nimport CookieImage from './CookieImage'\nimport Dropdown from './Dropdown'\n\n\nimport { useState } from 'react';\n\nexport default function CookieList() {\n    // use state for if cookie is selected or not\n    const [ selection, setSelection ] = useState(null);\n    // use state for entire cookie list object\n    // label: Name\n    // value: value given \n    // src: photo\n    // selected: selection boolean\n    const [ cookies, setCookies ] = useState([{\n        label: 'Strawberry Cookie',\n        value: 'strawberry',\n        src: strawberry,\n        selected: false,\n    }, {\n        label: 'Gingerbrave',\n        value: 'gingerbrave',\n        src: gingerbrave,\n        selected: false,\n    }, {\n        label: 'Muscle Cookie',\n        value: 'muscle',\n        src: gingerbrave,\n        selected: false,\n    },{\n        label: 'Wizard Cookie',\n        value: 'wizard',\n        src: gingerbrave,\n        selected: false,\n    },{\n        label: 'Beet Cookie',\n        value: 'beet',\n        src: gingerbrave,\n        selected: false,\n    },{\n        label: 'Angel Cookie',\n        value: 'angel',\n        src: gingerbrave,\n        selected: false,\n    }]);\n\n\n    // function to select cookie\n    const handleSelect = (cookie) => {\n        setSelection(cookie);\n    };\n    return (\n        <div className=\"block rounded-xl border border-gray-100 p-4 shadow-sm hover:border-gray-200 hover:ring-1 hover:ring-gray-200 focus:outline-none focus:ring\">        \n            <CookieImage cookies={cookies} value={selection}/>\n\n            <Dropdown cookies={cookies} value={selection} onChange={handleSelect} />\n            {/* <h2 className=\"mt-2 font-bold\">Add Cookie</h2> */}\n        </div>\n    );\n}\n\n\n    // handleCommentEdit: function(id, text) {\n    //     this.setState({\n    //       data: this.state.data.map(el => (el.id === id ? Object.assign({}, el, { text }) : el))\n    //     });\n    // }\n\n    // setCookies\n\n    // cookies = [{\n    //     label: 'Strawberry Cookie',\n    //     value: 'strawberry',\n    //     src: strawberry,\n    //     selected: false,\n    // }, {\n    //     label: 'Gingerbrave',\n    //     value: 'gingerbrave',\n    //     src: gingerbrave,\n    //     selected: false,\n    // }, {\n    //     label: 'Muscle Cookie',\n    //     value: 'muscle',\n    //     src: gingerbrave,\n    //     selected: false,\n    // },{\n    //     label: 'Wizard Cookie',\n    //     value: 'wizard',\n    //     src: gingerbrave,\n    //     selected: false,\n    // },{\n    //     label: 'Beet Cookie',\n    //     value: 'beet',\n    //     src: gingerbrave,\n    //     selected: false,\n    // },{\n    //     label: 'Angel Cookie',\n    //     value: 'angel',\n    //     src: gingerbrave,\n    //     selected: false,\n    // }];\n\n    // const listCookies = cookies.map(cookie =>\n        \n    // );"],"mappings":"mKAAA,MAAO,CAAAA,UAAU,KAAM,uBAAuB,CAC9C,MAAO,CAAAC,WAAW,KAAM,wBAAwB,CAChD,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,MAAO,CAAAC,QAAQ,KAAM,YAAY,CAGjC,OAASC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEjC,cAAe,SAAS,CAAAC,UAAUA,CAAA,CAAG,CACjC;AACA,IAAAC,SAAA,CAAoCN,QAAQ,CAAC,IAAI,CAAC,CAAAO,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAA1CG,SAAS,CAAAF,UAAA,IAAEG,YAAY,CAAAH,UAAA,IAC/B;AACA;AACA;AACA;AACA;AACA,IAAAI,UAAA,CAAgCX,QAAQ,CAAC,CAAC,CACtCY,KAAK,CAAE,mBAAmB,CAC1BC,KAAK,CAAE,YAAY,CACnBC,GAAG,CAAElB,UAAU,CACfmB,QAAQ,CAAE,KACd,CAAC,CAAE,CACCH,KAAK,CAAE,aAAa,CACpBC,KAAK,CAAE,aAAa,CACpBC,GAAG,CAAEjB,WAAW,CAChBkB,QAAQ,CAAE,KACd,CAAC,CAAE,CACCH,KAAK,CAAE,eAAe,CACtBC,KAAK,CAAE,QAAQ,CACfC,GAAG,CAAEjB,WAAW,CAChBkB,QAAQ,CAAE,KACd,CAAC,CAAC,CACEH,KAAK,CAAE,eAAe,CACtBC,KAAK,CAAE,QAAQ,CACfC,GAAG,CAAEjB,WAAW,CAChBkB,QAAQ,CAAE,KACd,CAAC,CAAC,CACEH,KAAK,CAAE,aAAa,CACpBC,KAAK,CAAE,MAAM,CACbC,GAAG,CAAEjB,WAAW,CAChBkB,QAAQ,CAAE,KACd,CAAC,CAAC,CACEH,KAAK,CAAE,cAAc,CACrBC,KAAK,CAAE,OAAO,CACdC,GAAG,CAAEjB,WAAW,CAChBkB,QAAQ,CAAE,KACd,CAAC,CAAC,CAAC,CAAAC,UAAA,CAAAR,cAAA,CAAAG,UAAA,IA9BKM,OAAO,CAAAD,UAAA,IAAEE,UAAU,CAAAF,UAAA,IAiC3B;AACA,GAAM,CAAAG,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAIC,MAAM,CAAK,CAC7BV,YAAY,CAACU,MAAM,CAAC,CACxB,CAAC,CACD,mBACIhB,KAAA,QAAKiB,SAAS,CAAC,4IAA4I,CAAAC,QAAA,eACvJpB,IAAA,CAACJ,WAAW,EAACmB,OAAO,CAAEA,OAAQ,CAACJ,KAAK,CAAEJ,SAAU,CAAC,CAAC,cAElDP,IAAA,CAACH,QAAQ,EAACkB,OAAO,CAAEA,OAAQ,CAACJ,KAAK,CAAEJ,SAAU,CAACc,QAAQ,CAAEJ,YAAa,CAAE,CAAC,EAEvE,CAAC,CAEd,CAGI;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}